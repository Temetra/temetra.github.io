var t=Object.defineProperty,e=Object.defineProperties,r=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,o=(e,r,n)=>r in e?t(e,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[r]=n,c=(t,e)=>{for(var r in e||(e={}))s.call(e,r)&&o(t,r,e[r]);if(n)for(var r of n(e))a.call(e,r)&&o(t,r,e[r]);return t},u=(t,n)=>e(t,r(n));import{s as i,e as l}from"./Measurement.4181117a.js";import{I as d,J as b}from"./vendor.084c2357.js";var E=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/version.dac4df41.json"}),m=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/circuits.feeafd89.csv"}),T=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/constructors.da79143a.csv"}),f=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/constructors_colours.694100db.csv"}),I=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/drivers.4ee647cb.csv"}),p=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/qualifying.d94d4adf.csv"}),_=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/races.2cb184b5.csv"}),g=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/status.1613e1e0.csv"}),h=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/results_1950.896b23f8.csv"}),R=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/results_1960.068bb7f7.csv"}),N=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/results_1970.c0e92a5c.csv"}),y=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/results_1980.6e491d7c.csv"}),v=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/results_1990.1ca63e9b.csv"}),w=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/results_2000.95ad3368.csv"}),L=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/results_2010.b34da6ab.csv"}),S=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:"assets/results_2020.7d2f3b9c.csv"}),O=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",version:E,circuits:m,constructors:T,constructors_colours:f,drivers:I,qualifying:p,races:_,status:g,results_1950:h,results_1960:R,results_1970:N,results_1980:y,results_1990:v,results_2000:w,results_2010:L,results_2020:S});var j={open:async function(t){return d(t,1,{upgrade:e=>e.createObjectStore(t)}).then((e=>({get:r=>e.get(t,r),put:(r,n)=>e.put(t,n,r),clear:()=>e.clear(t)})))}};const G=t=>{throw t};let A=0;function U(t=A,e){return new Promise((r=>{t>0?setTimeout((()=>r(e)),t):r(e)}))}async function M(t,e,r){return U().then((n=>{e.run(r.createTable),e.run(r.createIndices),t({done:"table",table:r.tablename})})).catch((t=>{throw new Error(`createTable "${r.tablename}"\n${t.message}`)}))}async function $(t,e,r,n,s){return U().then((t=>async function(t,e){return j.open(t).then((t=>t.get(e))).then((t=>t||G("not-cached"))).catch((r=>{if("not-cached"==r)return fetch(e).then((t=>t||G("not-found"))).then((t=>t.text())).then((async r=>await j.open(t).then((t=>t.put(e,r))).then((t=>r))));throw r}))}(r,s))).then((t=>function*(t,e){var r,n;const s=(null==e?void 0:e.separator)||",",a=(null==e?void 0:e.delimiter)||'"';let o=[],c=0,u=!1;for(let i=0;i<t.length;i++){let e=t.charAt(i),n=t.charAt(i+1);o[c]=o[c]||"",e==a&&u&&n==a?(o[c]+=e,i++):e!=a?e!=s||u?"\r"!=e&&"\n"!=e||u?o[c]+=e:("\r"==e&&"\n"==n&&i++,(null==(r=o[0])?void 0:r.length)>0&&(yield o),o=[],c=0):c++:u=!u}(null==(n=o[0])?void 0:n.length)>0&&(yield o)}(t))).then((t=>function(t,e,r){let n=r.next().value,s=[];for(let a of r)s.push(a.map(((t,r)=>e(t,r))));return`INSERT INTO ${t} ([${n.join("], [")}]) VALUES (${s.join("),\n(")})`}(n.tablename,n.mapToSQL,t))).then((t=>e.run(t))).then((e=>t({done:"insert",table:n.tablename}))).catch((t=>{throw new Error(`insertFetchedData "${n.tablename}" "${s}"\n${t.message}"`)}))}var C={string:t=>t?`"${t}"`:"NULL",number:t=>t?+t:"NULL",date:t=>t?new Date(t).valueOf()/1e3:"NULL",path:(...t)=>t.map((t=>t.replace(/\/+$/,""))).join("/")};const z={tablename:"circuits",createTable:'CREATE TABLE "circuits" (\n\t"circuitId"\tINTEGER NOT NULL UNIQUE,\n\t"name"\tTEXT,\n\t"location"\tTEXT,\n\t"country"\tTEXT,\n\t"lat"\tREAL,\n\t"lng"\tREAL,\n\t"alt"\tINTEGER,\n\tPRIMARY KEY("circuitId"))',createIndices:"",mapToSQL:(t,e)=>[C.number,C.string,C.string,C.string,C.number,C.number,C.number][e](t)},Q={tablename:"constructors_colours",createTable:'CREATE TABLE "constructors_colours" (\n\t"constructorColourId"\tINTEGER NOT NULL DEFAULT 0 UNIQUE,\n\t"constructorId"\tINTEGER,\n\t"year"\tINTEGER,\n\t"colour"\tTEXT,\n\tPRIMARY KEY("constructorColourId" AUTOINCREMENT))',createIndices:"",mapToSQL:(t,e)=>[C.number,C.number,C.number,C.string][e](t)},q={tablename:"constructors",createTable:'CREATE TABLE "constructors" (\n\t"constructorId"\tINTEGER NOT NULL UNIQUE,\n\t"name"\tTEXT,\n\t"nationality"\tTEXT,\n\tPRIMARY KEY("constructorId"))',createIndices:"",mapToSQL:(t,e)=>[C.number,C.string,C.string][e](t)},Y={tablename:"drivers",createTable:'CREATE TABLE "drivers" (\n\t"driverId"\tINTEGER NOT NULL UNIQUE,\n\t"number"\tINTEGER,\n\t"code"\tTEXT,\n\t"forename"\tTEXT,\n\t"surname"\tTEXT,\n\t"dob"\tINTEGER,\n\t"nationality"\tTEXT,\n\tPRIMARY KEY("driverId"))',createIndices:"",mapToSQL:(t,e)=>[C.number,C.number,C.string,C.string,C.string,C.date,C.string][e](t)},P={tablename:"qualifying",createTable:'CREATE TABLE "qualifying" (\n\t"qualifyId"\tINTEGER NOT NULL UNIQUE,\n\t"raceId"\tINTEGER,\n\t"driverId"\tINTEGER,\n\t"constructorId"\tINTEGER,\n\t"number"\tINTEGER,\n\t"position"\tINTEGER,\n\t"q1"\tINTEGER,\n\t"q2"\tINTEGER,\n\t"q3"\tINTEGER,\n\tPRIMARY KEY("qualifyId"))',createIndices:"",mapToSQL:(t,e)=>[C.number,C.number,C.number,C.number,C.number,C.number,C.number,C.number,C.number][e](t)},X={tablename:"races",createTable:'CREATE TABLE "races" (\n\t"raceId"\tINTEGER NOT NULL UNIQUE,\n\t"circuitId"\tINTEGER,\n\t"year"\tINTEGER,\n\t"round"\tINTEGER,\n\t"title"\tTEXT,\n\t"when"\tINTEGER,\n\tPRIMARY KEY("raceId"))',createIndices:"",mapToSQL:(t,e)=>[C.number,C.number,C.number,C.number,C.string,C.date][e](t)},H={tablename:"results",createTable:'CREATE TABLE "results" (\n\t"resultId"\tINTEGER NOT NULL UNIQUE,\n\t"raceId"\tINTEGER,\n\t"driverId"\tINTEGER,\n\t"constructorId"\tINTEGER,\n\t"number"\tINTEGER,\n\t"grid"\tINTEGER,\n\t"position"\tINTEGER,\n\t"positionText"\tTEXT,\n\t"positionOrder"\tINTEGER,\n\t"points"\tREAL,\n\t"laps"\tINTEGER,\n\t"milliseconds"\tINTEGER,\n\t"fastestLap"\tINTEGER,\n\t"rank"\tINTEGER,\n\t"fastestLapTime"\tINTEGER,\n\t"fastestLapSpeed"\tREAL,\n\t"statusId"\tINTEGER,\n\tPRIMARY KEY("resultId"))',createIndices:'CREATE INDEX "results_idx" ON "results" (\n\t"raceId"\n)',mapToSQL:(t,e)=>[C.number,C.number,C.number,C.number,C.number,C.number,C.number,C.string,C.number,C.number,C.number,C.number,C.number,C.number,C.number,C.number,C.number][e](t)},D={tablename:"status",createTable:'CREATE TABLE "status" (\n\t"statusId"\tINTEGER NOT NULL UNIQUE,\n\t"status"\tTEXT,\n\tPRIMARY KEY("statusId"))',createIndices:"",mapToSQL:(t,e)=>[C.number,C.string][e](t)};function B(t,e,r,n){let s=t.prepare(e).getAsObject(r);return n?n(s):s}function K(t){if(t){return B(this,"select *\n\t\t\tfrom circuits\n\t\t\twhere circuitId = $circuitId",{$circuitId:t})}return null}const k=t=>u(c({},t),{dob:new Date(1e3*t.dob)});function x(t){return B(this,'select * \n\t\tfrom drivers \n\t\twhere (drivers.forename || " " || drivers.surname) \n\t\t\tlike $name\n\t\tlimit 1',{$name:t},k)}function F(t,e,r,n){let s=[],a=t.prepare(e);for(a.bind(r);a.step();){let t=a.getAsObject();s.push(n?n(t):t)}return s}const J=t=>u(c({},t),{when:new Date(1e3*t.when)});function W(t){return F(this,"select races.*, circuits.*\n\t\tfrom races\n\t\tjoin circuits on races.circuitId = circuits.circuitId\n\t\twhere year = $year\n\t\torder by round",{$year:t},J)}const V=t=>u(c({},t),{hasFastestLap:1==t.hasFastestLap,hasSlowestLap:1==t.hasSlowestLap});function Z(t,e){return F(this,"select r.resultId, \n\t\tr.driverId, drivers.forename, drivers.surname,\n\t\tconstructors.name as team,\n\t\tconstructors_colours.colour as teamColour, \n\t\tstatus.status,\n\t\tr.grid, \n\t\tr.position,\n\t\tr.grid - r.position as positionsMoved,\n\t\tr.points,\n\t\tr.laps,\n\t\tr.fastestLap,\n\t\tr.fastestLapTime,\n\t\tcase when \n\t\t\tr.fastestLapTime = (select \n\t\t\t\tmin(results.fastestLapTime)\n\t\t\t\tfrom results \n\t\t\t\twhere results.raceId = r.raceId)\n\t\t\tthen 1\n\t\t\telse 0\n\t\t\tend as hasFastestLap,\n\t\tcase when \n\t\t\tr.fastestLapTime = (select \n\t\t\t\tmax(results.fastestLapTime)\n\t\t\t\tfrom results \n\t\t\t\twhere results.raceId = r.raceId\n\t\t\t\t\tand results.position > 0)\n\t\t\tthen 1\n\t\t\telse 0\n\t\t\tend as hasSlowestLap\n\t\tfrom results r\n\t\tjoin races on races.raceId = r.raceId\n\t\tjoin drivers on drivers.driverId = r.driverId\n\t\tjoin constructors on constructors.constructorId = r.constructorId\n\t\tjoin status on status.statusId = r.statusId\n\t\tleft join constructors_colours on constructors_colours.constructorColourId = (\n\t\t\tselect constructors_colours.constructorColourId\n\t\t\tfrom constructors_colours \n\t\t\twhere constructors_colours.constructorId = r.constructorId\n\t\t\tand constructors_colours.year >= $year\n\t\t\torder by constructors_colours.year asc\n\t\t\tlimit 1\n\t\t\t)\n\t\twhere races.year = $year and races.round = $round\n\t\torder by r.positionOrder",{$year:t,$round:e},V)}const tt={locateFile:t=>`https://cdn.jsdelivr.net/npm/sql.js@1.5.0/dist/${t}`};async function et(t,e,r){let n=await b(r||tt).then((t=>new t.Database)).then((t=>(e({done:"database",max:19}),t)));return await M(e,n,z),await M(e,n,Q),await M(e,n,q),await M(e,n,Y),await M(e,n,P),await M(e,n,X),await M(e,n,H),await M(e,n,D),await async function(t,e){return fetch(e).then((t=>t||G("not-found"))).then((t=>t.json())).then((async e=>{let r=await j.open(t);return await r.get(`${t}-version`)!=e.version&&await r.clear(),r.put(`${t}-version`,e.version)})).then((t=>{}))}("f1-data",t.version),await $(e,n,"f1-data",z,t.circuits),await $(e,n,"f1-data",Q,t.constructors_colours),await $(e,n,"f1-data",q,t.constructors),await $(e,n,"f1-data",Y,t.drivers),await $(e,n,"f1-data",P,t.qualifying),await $(e,n,"f1-data",X,t.races),await $(e,n,"f1-data",H,t.results_2020),await $(e,n,"f1-data",H,t.results_2010),await $(e,n,"f1-data",H,t.results_2000),await $(e,n,"f1-data",D,t.status),{getCircuit:K.bind(n),getDriverByName:x.bind(n),getJoinedRaces:W.bind(n),getRaceResults:Z.bind(n)}}const rt=self;let nt=null;const st=new class{constructor(t){this.dispatcher=t,this.requestHandlers={}}registerHandler(t,e){if(t in this.requestHandlers)throw`ServerWorkerStub: Handler already registered for '${t}'`;this.requestHandlers[t]=e}receive(t){if(t.name in this.requestHandlers){i("ServerWorkerStub",t.id);let e=e=>this.dispatcher({id:t.id,name:"progress",data:e});this.requestHandlers[t.name](t.data,e).then((e=>this.dispatcher({id:t.id,name:"payload",data:e}))).then((()=>l("ServerWorkerStub",t.id))).catch((e=>this.dispatcher({id:t.id,name:"error",data:e})))}else this.dispatcher({id:t.id,name:"error",data:"Unknown worker message"})}}((t=>rt.postMessage(t)));rt.onmessage=t=>st.receive(t.data),st.registerHandler("init",(async function(t,e){if(null==nt){A=0;let r={};for(let e of Object.getOwnPropertyNames(O)){let n=O[e].default;n.indexOf("@fs/")>=0?r[e]=n:r[e]=t.baseURI+n}return et(r,e).then((t=>{nt=t}))}throw"Database already initialised"})),st.registerHandler("getCircuit",(async t=>nt.getCircuit(t.circuitId))),st.registerHandler("getJoinedRaces",(async t=>nt.getJoinedRaces(t.year))),st.registerHandler("getRaceResults",(async t=>nt.getRaceResults(t.year,t.round)));
