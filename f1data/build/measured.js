import{z as t,A as r}from"./main2.js";function s(t){let r=t.getAsObject();return r.when=new Date(r.when),r}const o=t((function(t,r){let o=t.prepare("select races.*, circuits.*\n\t\tfrom races\n\t\tjoin circuits on races.circuitId = circuits.circuitId\n\t\twhere year = $year\n\t\torder by round");o.bind({$year:r});let e=[];for(;o.step();)e.push(s(o));return e}),"getJoinedRaces"),e=t((function(t,r){let s=t.prepare("select \n\t\t\tresults.resultId,\n\t\t\tdrivers.forename, \n\t\t\tdrivers.surname, \n\t\t\tconstructors.name as team, \n\t\t\tconstructors_colors.color, \n\t\t\tresults.grid, \n\t\t\tresults.position, \n\t\t\tresults.laps, \n\t\t\tstatus.status, \n\t\t\tresults.points\n\t\tfrom results\n\t\tjoin drivers on results.driverId = drivers.driverId\n\t\tjoin constructors on results.constructorId = constructors.constructorId\n\t\tjoin status on results.statusId = status.statusId\n\t\tjoin races on results.raceId = races.raceId\n\t\tleft join constructors_colors on constructors_colors.constructorColorId = (\n\t\t\tselect constructors_colors.constructorColorId\n\t\t\tfrom constructors_colors \n\t\t\twhere constructors_colors.constructorId = results.constructorId\n\t\t\tand constructors_colors.year >= races.year\n\t\t\torder by constructors_colors.year asc\n\t\t\tlimit 1\n\t\t\t)\n\t\twhere results.raceId = $raceId\n\t\torder by positionOrder");s.bind({$raceId:r});let o=[];for(;s.step();)o.push(s.getAsObject());return o}),"getResults"),n=t(r,"getDecades");export{o as a,e as b,n as g};
//# sourceMappingURL=measured.js.map
