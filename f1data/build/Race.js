import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, R as validate_store, T as component_subscribe, v as validate_slots, U as storedDb, O as formatDate, c as create_component, m as mount_component, t as transition_in, a as transition_out, b as destroy_component, q as validate_each_argument, j as element, n as add_location, f as insert_dev, g as detach_dev, r as destroy_each, e as text, k as space, l as attr_dev, H as toggle_class, o as append_dev, Q as set_data_dev, w as empty, x as noop } from './main2.js';
import { g as getJoinedRaces } from './races.js';
import { S as SectionTemplate } from './SectionTemplate.js';

function getResults(db, raceId) {
    let stmt = db.prepare(`select 
			drivers.forename, 
			drivers.surname, 
			constructors.name as team, 
			results.grid, 
			results.position, 
			results.laps, 
			status.status, 
			results.points
		from results
		join drivers on results.driverId = drivers.driverId
		join constructors on results.constructorId = constructors.constructorId
		join status on results.statusId = status.statusId
		where raceId = $raceId
		order by positionOrder`);
    stmt.bind({ $raceId: raceId });
    let output = [];
    while (stmt.step()) {
        output.push(stmt.getAsObject());
    }
    return output;
}

/* src\components\Race.svelte generated by Svelte v3.37.0 */
const file = "src\\components\\Race.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (56:1) {:else}
function create_else_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No results");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(56:1) {:else}",
		ctx
	});

	return block;
}

// (35:1) {#if results?.length > 0}
function create_if_block_2(ctx) {
	let table;
	let tr;
	let th0;
	let t1;
	let th1;
	let t3;
	let th2;
	let t5;
	let th3;
	let t7;
	let th4;
	let t9;
	let th5;
	let t11;
	let each_value_1 = /*results*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			table = element("table");
			tr = element("tr");
			th0 = element("th");
			th0.textContent = "Driver";
			t1 = space();
			th1 = element("th");
			th1.textContent = "Constructor";
			t3 = space();
			th2 = element("th");
			th2.textContent = "Grid";
			t5 = space();
			th3 = element("th");
			th3.textContent = "Position";
			t7 = space();
			th4 = element("th");
			th4.textContent = "Laps";
			t9 = space();
			th5 = element("th");
			th5.textContent = "Points";
			t11 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(th0, file, 37, 4, 1011);
			add_location(th1, file, 38, 4, 1032);
			add_location(th2, file, 39, 4, 1058);
			add_location(th3, file, 40, 4, 1077);
			add_location(th4, file, 41, 4, 1100);
			add_location(th5, file, 42, 4, 1119);
			add_location(tr, file, 36, 3, 1001);
			add_location(table, file, 35, 2, 989);
		},
		m: function mount(target, anchor) {
			insert_dev(target, table, anchor);
			append_dev(table, tr);
			append_dev(tr, th0);
			append_dev(tr, t1);
			append_dev(tr, th1);
			append_dev(tr, t3);
			append_dev(tr, th2);
			append_dev(tr, t5);
			append_dev(tr, th3);
			append_dev(tr, t7);
			append_dev(tr, th4);
			append_dev(tr, t9);
			append_dev(tr, th5);
			append_dev(table, t11);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*results*/ 4) {
				each_value_1 = /*results*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(table, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(table);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(35:1) {#if results?.length > 0}",
		ctx
	});

	return block;
}

// (45:3) {#each results as result}
function create_each_block_1(ctx) {
	let tr;
	let td0;
	let t0_value = /*result*/ ctx[8].forename + "";
	let t0;
	let t1;
	let t2_value = /*result*/ ctx[8].surname + "";
	let t2;
	let t3;
	let td1;
	let t4_value = /*result*/ ctx[8].team + "";
	let t4;
	let t5;
	let td2;
	let t6_value = /*result*/ ctx[8].grid + "";
	let t6;
	let t7;
	let td3;
	let t8_value = (/*result*/ ctx[8].position || /*result*/ ctx[8].status) + "";
	let t8;
	let t9;
	let td4;
	let t10_value = /*result*/ ctx[8].laps + "";
	let t10;
	let t11;
	let td5;
	let t12_value = /*result*/ ctx[8].points + "";
	let t12;
	let t13;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			td1 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td2 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td3 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td4 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td5 = element("td");
			t12 = text(t12_value);
			t13 = space();
			add_location(td0, file, 46, 5, 1191);
			add_location(td1, file, 47, 5, 1241);
			add_location(td2, file, 48, 5, 1270);
			add_location(td3, file, 49, 5, 1299);
			add_location(td4, file, 50, 5, 1349);
			add_location(td5, file, 51, 5, 1378);
			add_location(tr, file, 45, 4, 1180);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(td0, t1);
			append_dev(td0, t2);
			append_dev(tr, t3);
			append_dev(tr, td1);
			append_dev(td1, t4);
			append_dev(tr, t5);
			append_dev(tr, td2);
			append_dev(td2, t6);
			append_dev(tr, t7);
			append_dev(tr, td3);
			append_dev(td3, t8);
			append_dev(tr, t9);
			append_dev(tr, td4);
			append_dev(td4, t10);
			append_dev(tr, t11);
			append_dev(tr, td5);
			append_dev(td5, t12);
			append_dev(tr, t13);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*results*/ 4 && t0_value !== (t0_value = /*result*/ ctx[8].forename + "")) set_data_dev(t0, t0_value);
			if (dirty & /*results*/ 4 && t2_value !== (t2_value = /*result*/ ctx[8].surname + "")) set_data_dev(t2, t2_value);
			if (dirty & /*results*/ 4 && t4_value !== (t4_value = /*result*/ ctx[8].team + "")) set_data_dev(t4, t4_value);
			if (dirty & /*results*/ 4 && t6_value !== (t6_value = /*result*/ ctx[8].grid + "")) set_data_dev(t6, t6_value);
			if (dirty & /*results*/ 4 && t8_value !== (t8_value = (/*result*/ ctx[8].position || /*result*/ ctx[8].status) + "")) set_data_dev(t8, t8_value);
			if (dirty & /*results*/ 4 && t10_value !== (t10_value = /*result*/ ctx[8].laps + "")) set_data_dev(t10, t10_value);
			if (dirty & /*results*/ 4 && t12_value !== (t12_value = /*result*/ ctx[8].points + "")) set_data_dev(t12, t12_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(45:3) {#each results as result}",
		ctx
	});

	return block;
}

// (60:1) {#if races}
function create_if_block_1(ctx) {
	let ul;
	let each_value = /*races*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(ul, file, 60, 2, 1489);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*races, race*/ 3) {
				each_value = /*races*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(60:1) {#if races}",
		ctx
	});

	return block;
}

// (62:3) {#each races as r}
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*r*/ ctx[5].country + "";
	let t0;
	let a_href_value;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(a, "href", a_href_value = "#/race/" + /*r*/ ctx[5].year + "/" + /*r*/ ctx[5].round);
			add_location(a, file, 63, 5, 1576);
			toggle_class(li, "highlight", /*r*/ ctx[5].raceId == /*race*/ ctx[1]?.raceId);
			add_location(li, file, 62, 4, 1522);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t0);
			append_dev(li, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*races*/ 1 && t0_value !== (t0_value = /*r*/ ctx[5].country + "")) set_data_dev(t0, t0_value);

			if (dirty & /*races*/ 1 && a_href_value !== (a_href_value = "#/race/" + /*r*/ ctx[5].year + "/" + /*r*/ ctx[5].round)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*races, race*/ 3) {
				toggle_class(li, "highlight", /*r*/ ctx[5].raceId == /*race*/ ctx[1]?.raceId);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(62:3) {#each races as r}",
		ctx
	});

	return block;
}

// (25:0) <SectionTemplate>
function create_default_slot(ctx) {
	let t;
	let if_block1_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*results*/ ctx[2]?.length > 0) return create_if_block_2;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*races*/ ctx[0] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			}

			if (/*races*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d: function destroy(detaching) {
			if_block0.d(detaching);
			if (detaching) detach_dev(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(25:0) <SectionTemplate>",
		ctx
	});

	return block;
}

// (30:2) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No race");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(30:2) {:else}",
		ctx
	});

	return block;
}

// (27:2) {#if race}
function create_if_block(ctx) {
	let div0;
	let t0_value = /*race*/ ctx[1].year + "";
	let t0;
	let t1;
	let t2_value = /*race*/ ctx[1].title + "";
	let t2;
	let t3;
	let t4_value = /*race*/ ctx[1].round + "";
	let t4;
	let t5;
	let div1;
	let t6_value = formatDate(/*race*/ ctx[1]?.when) + "";
	let t6;

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			t3 = text(", Round ");
			t4 = text(t4_value);
			t5 = space();
			div1 = element("div");
			t6 = text(t6_value);
			attr_dev(div0, "class", "svelte-kytwua");
			add_location(div0, file, 27, 3, 818);
			attr_dev(div1, "class", "svelte-kytwua");
			add_location(div1, file, 28, 3, 878);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, t0);
			append_dev(div0, t1);
			append_dev(div0, t2);
			append_dev(div0, t3);
			append_dev(div0, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, t6);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*race*/ 2 && t0_value !== (t0_value = /*race*/ ctx[1].year + "")) set_data_dev(t0, t0_value);
			if (dirty & /*race*/ 2 && t2_value !== (t2_value = /*race*/ ctx[1].title + "")) set_data_dev(t2, t2_value);
			if (dirty & /*race*/ 2 && t4_value !== (t4_value = /*race*/ ctx[1].round + "")) set_data_dev(t4, t4_value);
			if (dirty & /*race*/ 2 && t6_value !== (t6_value = formatDate(/*race*/ ctx[1]?.when) + "")) set_data_dev(t6, t6_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(27:2) {#if race}",
		ctx
	});

	return block;
}

// (26:1) 
function create_header_slot(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*race*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "title svelte-kytwua");
			attr_dev(div, "slot", "header");
			add_location(div, file, 25, 1, 766);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_header_slot.name,
		type: "slot",
		source: "(26:1) ",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let sectiontemplate;
	let current;

	sectiontemplate = new SectionTemplate({
			props: {
				$$slots: {
					header: [create_header_slot],
					default: [create_default_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(sectiontemplate.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(sectiontemplate, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const sectiontemplate_changes = {};

			if (dirty & /*$$scope, race, races, results*/ 2055) {
				sectiontemplate_changes.$$scope = { dirty, ctx };
			}

			sectiontemplate.$set(sectiontemplate_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sectiontemplate.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sectiontemplate.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sectiontemplate, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $db;
	validate_store(storedDb, "db");
	component_subscribe($$self, storedDb, $$value => $$invalidate(4, $db = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Race", slots, []);
	
	let { params } = $$props;
	let races, race, results;
	const writable_props = ["params"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Race> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("params" in $$props) $$invalidate(3, params = $$props.params);
	};

	$$self.$capture_state = () => ({
		db: storedDb,
		getJoinedRaces,
		getResults,
		formatDate,
		SectionTemplate,
		params,
		races,
		race,
		results,
		$db
	});

	$$self.$inject_state = $$props => {
		if ("params" in $$props) $$invalidate(3, params = $$props.params);
		if ("races" in $$props) $$invalidate(0, races = $$props.races);
		if ("race" in $$props) $$invalidate(1, race = $$props.race);
		if ("results" in $$props) $$invalidate(2, results = $$props.results);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*params, $db*/ 24) {
			if (params.year) $$invalidate(0, races = getJoinedRaces($db, params.year));
		}

		if ($$self.$$.dirty & /*params, races*/ 9) {
			if (params.round && races) $$invalidate(1, race = races.find(x => x.round == params.round));
		}

		if ($$self.$$.dirty & /*race, $db*/ 18) {
			$$invalidate(2, results = race ? getResults($db, race.raceId) : null);
		}
	};

	return [races, race, results, params, $db];
}

class Race extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { params: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Race",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*params*/ ctx[3] === undefined && !("params" in props)) {
			console.warn("<Race> was created without expected prop 'params'");
		}
	}

	get params() {
		throw new Error("<Race>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set params(value) {
		throw new Error("<Race>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Race;
//# sourceMappingURL=Race.js.map
