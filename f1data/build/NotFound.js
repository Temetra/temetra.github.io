import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, c as create_component, m as mount_component, t as transition_in, a as transition_out, b as destroy_component, e as text, f as insert_dev, g as detach_dev } from './main2.js';
import { S as SectionTemplate } from './SectionTemplate.js';

/* src\components\NotFound.svelte generated by Svelte v3.37.0 */

// (9:1) <svelte:fragment slot="header">
function create_header_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Not found");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_header_slot.name,
		type: "slot",
		source: "(9:1) <svelte:fragment slot=\\\"header\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let sectiontemplate;
	let current;

	sectiontemplate = new SectionTemplate({
			props: {
				$$slots: { header: [create_header_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(sectiontemplate.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(sectiontemplate, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const sectiontemplate_changes = {};

			if (dirty & /*$$scope*/ 2) {
				sectiontemplate_changes.$$scope = { dirty, ctx };
			}

			sectiontemplate.$set(sectiontemplate_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sectiontemplate.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sectiontemplate.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sectiontemplate, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("NotFound", slots, []);
	let { params = {} } = $$props;
	params = params; // Component has unused export property 'params'
	const writable_props = ["params"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<NotFound> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("params" in $$props) $$invalidate(0, params = $$props.params);
	};

	$$self.$capture_state = () => ({ SectionTemplate, params });

	$$self.$inject_state = $$props => {
		if ("params" in $$props) $$invalidate(0, params = $$props.params);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [params];
}

class NotFound extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { params: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NotFound",
			options,
			id: create_fragment.name
		});
	}

	get params() {
		throw new Error("<NotFound>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set params(value) {
		throw new Error("<NotFound>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default NotFound;
//# sourceMappingURL=NotFound.js.map
