import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, p as getDecades, q as validate_each_argument, c as create_component, m as mount_component, t as transition_in, a as transition_out, b as destroy_component, j as element, e as text, k as space, l as attr_dev, n as add_location, f as insert_dev, o as append_dev, g as detach_dev, r as destroy_each, w as empty, x as noop } from './main2.js';
import { S as SectionTemplate } from './SectionTemplate.js';

/* src\components\SeasonsTable.svelte generated by Svelte v3.37.0 */
const file = "src\\components\\SeasonsTable.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (50:3) {#each item.years as year}
function create_each_block_1(ctx) {
	let li;
	let a;
	let t_value = /*year*/ ctx[3] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			attr_dev(a, "href", "#/season/" + /*year*/ ctx[3]);
			attr_dev(a, "class", "svelte-p3xndf");
			add_location(a, file, 51, 5, 1061);
			attr_dev(li, "class", "svelte-p3xndf");
			add_location(li, file, 50, 4, 1050);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(50:3) {#each item.years as year}",
		ctx
	});

	return block;
}

// (45:1) {#each getDecades() as item}
function create_each_block(ctx) {
	let ul;
	let li;
	let a;
	let t0_value = /*item*/ ctx[0].decade + "";
	let t0;
	let t1;
	let t2;
	let each_value_1 = /*item*/ ctx[0].years;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			attr_dev(a, "href", "#/season/" + /*item*/ ctx[0].decade);
			attr_dev(a, "class", "svelte-p3xndf");
			add_location(a, file, 47, 4, 953);
			attr_dev(li, "class", "decade svelte-p3xndf");
			add_location(li, file, 46, 3, 928);
			attr_dev(ul, "class", "svelte-p3xndf");
			add_location(ul, file, 45, 2, 919);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			append_dev(ul, li);
			append_dev(li, a);
			append_dev(a, t0);
			append_dev(ul, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(ul, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getDecades*/ 0) {
				each_value_1 = /*item*/ ctx[0].years;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(45:1) {#each getDecades() as item}",
		ctx
	});

	return block;
}

// (41:0) <SectionTemplate>
function create_default_slot(ctx) {
	let each_1_anchor;
	let each_value = getDecades();
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getDecades*/ 0) {
				each_value = getDecades();
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(41:0) <SectionTemplate>",
		ctx
	});

	return block;
}

// (42:1) <svelte:fragment slot="header">
function create_header_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("All seasons, grouped by decade");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_header_slot.name,
		type: "slot",
		source: "(42:1) <svelte:fragment slot=\\\"header\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let sectiontemplate;
	let current;

	sectiontemplate = new SectionTemplate({
			props: {
				$$slots: {
					header: [create_header_slot],
					default: [create_default_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(sectiontemplate.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(sectiontemplate, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const sectiontemplate_changes = {};

			if (dirty & /*$$scope*/ 64) {
				sectiontemplate_changes.$$scope = { dirty, ctx };
			}

			sectiontemplate.$set(sectiontemplate_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sectiontemplate.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sectiontemplate.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sectiontemplate, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SeasonsTable", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SeasonsTable> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ getDecades, SectionTemplate });
	return [];
}

class SeasonsTable extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SeasonsTable",
			options,
			id: create_fragment.name
		});
	}
}

export default SeasonsTable;
//# sourceMappingURL=SeasonsTable.js.map
