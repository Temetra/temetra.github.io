import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, h as create_slot, v as validate_slots, j as element, k as space, l as attr_dev, n as add_location, f as insert_dev, o as append_dev, u as update_slot, t as transition_in, a as transition_out, g as detach_dev } from './main2.js';

/* src\components\SectionTemplate.svelte generated by Svelte v3.37.0 */

const file = "src\\components\\SectionTemplate.svelte";
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

function create_fragment(ctx) {
	let section;
	let header;
	let t;
	let article;
	let current;
	const header_slot_template = /*#slots*/ ctx[1].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[0], get_header_slot_context);
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	const block = {
		c: function create() {
			section = element("section");
			header = element("header");
			if (header_slot) header_slot.c();
			t = space();
			article = element("article");
			if (default_slot) default_slot.c();
			attr_dev(header, "class", "svelte-1gqp3sz");
			add_location(header, file, 18, 1, 364);
			attr_dev(article, "class", "svelte-1gqp3sz");
			add_location(article, file, 21, 1, 418);
			attr_dev(section, "class", "svelte-1gqp3sz");
			add_location(section, file, 17, 0, 352);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, header);

			if (header_slot) {
				header_slot.m(header, null);
			}

			append_dev(section, t);
			append_dev(section, article);

			if (default_slot) {
				default_slot.m(article, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (header_slot) {
				if (header_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[0], dirty, get_header_slot_changes, get_header_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (header_slot) header_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SectionTemplate", slots, ['header','default']);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SectionTemplate> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class SectionTemplate extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SectionTemplate",
			options,
			id: create_fragment.name
		});
	}
}

export { SectionTemplate as S };
//# sourceMappingURL=SectionTemplate.js.map
